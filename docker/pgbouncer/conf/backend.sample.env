# Add here your backend configuration
# 
# This file is different than the other .env files in that 
# it is a template for the backend configuration files for pgpool.

# THERE ARE NO MULTIPLES FILES. ALL CONFIGURATION IS IN THE SAME FILE
# To use it you need to copy the content of this file to the backend.env file

# Configuration file for backend servers
# These parameters are used to connect to the database or middleware to database

# Backend configuration
# Format for each role (Considering that PgBouncer is connecting to PgPool):
# There are two roles: rw (read-write) and ro (read-only)

# For each role, you need to set the number of backends and the host and port for each one
# If ro is not going to be used, set the number of backends to 0 (Since pgpool is a load-balancer middleware, all the backends are rw)
# Be careful if you connect directly to Postgres. and you are using replicas. !THE REPLICAS MUST BE READ-ONLY!

# For RO backends will create a connection pool for read-only queries and PgBouncer will create an abstrated name for the connection
# You can set the name of the database in the `RO_POSTGRES_DB` variable
# That means that your client must have any logic to connect to the read-only connection (Only if you connect PgBouncer directly to Postgres)
# Remider: PgBouncer is a connection pooler, not a load balancer

# How to connect to the read-only connection:
# The same as the read-write connection but with the database name set in `RO_POSTGRES_DB` (Only read queries allowed)
# psql -h localhost -p 6432 -U u_pgcloud -d db_pgcloud_ro



# Number of backend where you want to stabilize the connection
RW_BACKEND_NUM=3
RO_BACKEND_NUM=0

# rw - read-write
RW_BACKEND_HOST=127.0.0.1
# Can define multiple hosts
# RW_BACKEND_HOST=10.0.0.1,10.0.0.2,10.0.0.3...
RW_BACKEND_PORT=5432

# ro - read-only
RO_POSTGRES_DB=db_pgcloud_ro
RO_BACKEND_HOST=
# Can define multiple hosts
# RO_BACKEND_HOST=10.0.0.1,10.0.0.2,10.0.0.3...
RO_BACKEND_PORT=
