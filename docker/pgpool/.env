# --------- Basic postgres configuration ---------
POSTGRES_DB=db_pgcloud
POSTGRES_USER=u_pgcloud
POSTGRES_PASSWORD=p_pgcloud
# Path to save postgres data
PGDATA=/opt/pgdata
# Postgres server port
PGPORT=5432

# --------- Basic pgpool configuration ---------
# These parameters are used to connect to the pgpool cluster
# Must be use the same interface than the one used in the pgpool cluster config file
PGPOOL_HOST=127.0.0.1
PGPOOL_PORT=5434

# Load balancing mode, if set to `on` pgpool will balance the queries between the replicas
# If set to `off` pgpool will only use the primary server
PGPOOL_BALANCE_MODE=on

# Number of pgpool processes
NUM_INIT_CHILDREN=250

# Number of connections per pgpool process
MAX_POOL=4

# When enabling logfile, postgres will create a folder called log in PGDATA and save 
# all the logs in the file instead of trowing it in std output
ENABLE_LOGFILE=on
LOG_NAME=pgpool.log
LOG_FILENAME=pgpool-%Y-%m-%d.log


# ----------- PCP configuration -----------
PCP_PORT=9898

# PCP username and password
PCP_USER=u_pgcloud
PCP_PASS=p_pgcloud


# ----------- Basic cluster configuration -----------
# Server configuration path
SERVER_CONF_PATH=/opt/pgcloud/conf/postgres
BACKEND_CONF_PATH=/opt/pgcloud/conf/pgpool
POOLER_CONF_PATH=/opt/pgcloud/conf/pgbouncer

# ----------- Postgres cluster configuration -----------
# Number of db instances
DB_NUM=3

REPLICA_CHECK_PERIOD=10

REPLICA_USER=sp_replica
REPLICA_PASS=p_pgcloud

HEALTH_CHECK_PERIOD=10
HEALTH_CHECK_TIMEOUT=20

# ----------- Pgpool cluster configuration -----------
WD_PORT=9000
WD_HEARTBEAT_PORT=9694

# Heartbeat
WD_HEARTBEAT_INTERVAL=10
WD_HEARTBEAT_KEEPALIVE=2
WD_HEARTBEAT_DEADTIME=30

# Number of pgpool instances
# With 1 pgpool instance, the cluster will be in standalone mode. Any watchdog will be enabled
PGPOOL_NUM=3

# This parameter enable the pgpool node to make actions to 
# db nodes in master role.
# If slave is enabled, the node won't do anything when detect failover
# failback, dirt signal...
#
# Please make sure that there are only one master role
# When a master fails, other pgpool takes the leader to become master
# When new master start, first will check with other pgpool if 
# this node can be master or not, if cannot this node will become slave.
PGPOOL_ROLE=master

# Set the ip from any trusted server from your network, could be private or public
# This ip will be used to make the connection between pgpool and trusted_server and verify itself
# List which are used to confirm network connection
# (hostA,hostB,hostC,...)
# If you use public network, please make sure that the ip is reachable from the pgpool server
TRUSTED_SERVER=8.8.8.8

# ----------- Failover and failback configuration -----------

# %h = ip new primary
# %p = port new primary
# %x = ip old primary
# %r = port old primary

PHYSICAL_PROJECT_PATH=/home/user

# Execute user own failover script additional to pgpool failover
# Enable it and set the path to the script
# FAILOVER_EXTRA_SCRIPT=/opt/pgcloud/var/failover_extra.sh

# Enable failover and failback for replica nodes
FAILOVER_RECOVER_REPLICA=true

# ------ Recovery container
# Failover recovery primary
FAILOVER_RECOVERY_PRIMARY_CMD=cd /home/user ; docker container stop pgcloud_db ; ./RUN.sh
# Failover recovery replica
FAILOVER_RECOVERY_REPLICA_CMD=cd /home/user ; docker container stop pgcloud_db ; ./RUN.sh


# ------ Promote 
# Failover promote replica command
FAILOVER_PROMOTE_CMD=docker container exec pgcloud_db bash -c 'pgcloud_promote %x %r'

# Other option of promotion, trigger file
# FAILOVER_PROMOTE_CMD=docker container exec pgcloud_db bash -c 'touch /tmp/pg_promote'

# ------ Redirect
# Failover redirect replica to backup new promoted primary
FAILOVER_REDIRECT_CMD=docker container exec pgcloud_db bash -c 'pgcloud_redirect %h %p %x %r'


# ------ Depromote
# Failback depromote primary to replica
FAILOVER_DEPROMOTE_CMD=docker container exec pgcloud_db bash -c 'pg_depromote %h %p'

# Hard kill (Stop the service) and make depromotion manually
# FAILOVER_DEPROMOTE_CMD=docker container stop pgcloud_db

# Soft kill (Prepare server and launch server automatically)
# FAILOVER_DEPROMOTE_CMD=docker container exec pgcloud_db bash -c 'pgcloud_depromote %h %p' && cd $(dirname $(find / -name RUN.sh)) && sh $(find / -name RUN.sh)
# Soft kill (Prepare server and launch server with known path)
# FAILOVER_DEPROMOTE_CMD=docker container exec pgcloud_db bash -c 'pgcloud_depromote %h %p' && cd /opt/pgcloud && ./RUN.sh

# Execute user own failover configuration recovery script additional to pgpool failover configuration recovery
# Enable it and set the path to the script
# This script is important when you set some configuration that need to be changed after failover, like:
#   Setting primary with load_weight = 0
#   When failover is done must change the load_weight of new primary to 0 and old primary the same.
# FAILOVER_RECOVERY_CONFIG_SCRIPT=/opt/pgcloud/var/failover_config.sh